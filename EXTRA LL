~#include <stdio.h>
~#include <stdlib.h>
~
~struct node {
~    int value;
~    struct node *next;
~};
~
~typedef struct node* NODE;
~
~NODE getnode(int item) {
~    NODE new_node = (NODE)malloc(sizeof(struct node));
~    if (new_node == NULL) {
~        return NULL;
~    }
~    new_node->value = item;
~    new_node->next = NULL;
~    return new_node;
~}
~
~NODE insert_beg(NODE *first, int item) {
~    NODE newnode = getnode(item);
~    if (newnode == NULL) return *first;
~    newnode->next = *first;
~    *first = newnode;
~    return *first;
~}
~
~NODE insert_end(NODE *first, int item) {
~    NODE newnode = getnode(item);
~    if (newnode == NULL) return *first;
~    if (*first == NULL) {
~        *first = newnode;
~        return *first;
~    }
~    NODE curr = *first;
~    while (curr->next != NULL) {
~        curr = curr->next;
~    }
~    curr->next = newnode;
~    return *first;
~}
~
~NODE insert_pos(NODE *first, int item, int pos) {
~    NODE newnode = getnode(item);
~    if (newnode == NULL) return *first;
~    if (*first == NULL && pos != 0) {
~        free(newnode);
~        return *first;
~    }
~    if (pos == 0) {
~        newnode->next = *first;
~        *first = newnode;
~        return *first;
~    }
~
~    NODE prev = NULL;
~    NODE curr = *first;
~    int count = 1;
~    while (curr != NULL && count < pos) {
~        prev = curr;
~        curr = curr->next;
~        count++;
~    }
~    if (prev != NULL) {
~        prev->next = newnode;
~    }
~    newnode->next = curr;
~    return *first;
~}
~
~NODE delete_beg(NODE *first) {
~    if (*first == NULL) {
~        printf("Linked list is empty\n");
~        return NULL;
~    }
~    NODE temp = *first;
~    *first = temp->next;
~    free(temp);
~    return *first;
~}
~
~NODE delete_end(NODE *first) {
~    if (*first == NULL) {
~        printf("Linked list is empty\n");
~        return NULL;
~    }
~    if ((*first)->next == NULL) {
~        free(*first);
~        *first = NULL;
~        return *first;
~    }
~    NODE prev = NULL;
~    NODE curr = *first;
~    while (curr->next != NULL) {
~        prev = curr;
~        curr = curr->next;
~    }
~    prev->next = NULL;
~    free(curr);
~    return *first;
~}
~
~NODE delete_val(NODE *first, int val) {
~    NODE prev = NULL;
~    NODE curr = *first;
~    if (*first == NULL) {
~        printf("Linked list is empty\n");
~        return NULL;
~    }
~    while (curr != NULL && curr->value != val) {
~        prev = curr;
~        curr = curr->next;
~    }
~    if (curr == NULL) { // Value not found
~        printf("Value not found\n");
~        return *first;
~    }
~    if (prev == NULL) {
~        *first = curr->next;
~    } else {
~        prev->next = curr->next;
~    }
~    free(curr);
    return *first;
}

NODE* sort(NODE *first) {
    if (*first == NULL || (*first)->next == NULL) {
        return first;
@@ -135,12 +133,9 @@
    NODE temp1, temp2;
    int x;

    for (temp1 = *first; temp1 != NULL; temp1 = temp1->next) {
        for (temp2 = temp1->next; temp2 != NULL; temp2 = temp2->next) {
            if (temp1->value > temp2->value) {
                x = temp1->value;
                temp1->value = temp2->value;
                temp2->value = x;
@@ -151,47 +146,39 @@
    return *first;
}

NODE* concatenate(NODE *first,NODE *first2)
{
if(*first==NULL)
return *first2;
else if(*first2==NULL)
return *first;
NODE temp=*first;
while((temp->next)!=NULL)
{
temp=temp->next;
}
temp->next=*first2;
return *first;
NODE* concatenate(NODE *first, NODE *first2) {
    if (*first == NULL) return *first2;
    else if (*first2 == NULL) return *first;
    
    NODE temp = *first;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = *first2;
    return *first;
}

NODE* reverse(NODE *first) {
    NODE temp;;
    NODE curr =NULL;
    NODE temp;
    NODE curr = NULL;

    while (*first!= NULL) {
        temp=*first;
        *first=(*first)->next;
        temp->next=curr;
    while (*first != NULL) {
        temp = *first;
        *first = (*first)->next;
        temp->next = curr;
        curr = temp;
    }

    *first = curr;  // Set the new head of the reversed list
    return *first;
}

void display(NODE *first) {
    if (*first == NULL) {
void display(NODE first) {
    if (first == NULL) {
        printf("EMPTY\n");
        return;
    }
    NODE curr = *first;
    NODE curr = first;
    while (curr != NULL) {
        printf("%d\n", curr->value);
        curr = curr->next;
@@ -200,7 +187,7 @@

int main() {
    NODE first = NULL;
    NODE first2=NULL;
    NODE first2 = NULL;
    int choice;
    int item;
    int pos;
@@ -247,13 +234,13 @@
            case 9:
                printf("Enter item:\n");
                scanf("%d", &item);
                insert_end(&first, item);
                insert_end(&first2, item);  // Insert into second list
                break;
            case 10:
                concatenate(&first,&first2);
                concatenate(&first, &first2);
                break;
            case 11:
                display(&first);
                display(first);
                break;
            case 12:
                exit(0);
