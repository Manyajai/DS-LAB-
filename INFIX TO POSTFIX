#include <stdio.h>
#include <ctype.h>
char stack[100];
int top = -1;
void push(char ele) {
    stack[++top] = ele;
}
char pop() {
    if(top>=0) 
    return stack[top--]; // Return null character if stack is empty
}
int pr(char op) {
    switch (op) {
        case '#': return 0;
        case '(': return 1;
        case '+':
        case '-': return 2;
        case '*':
        case '/': return 3;
        default: return 0;
    }
}
int main() {
    char infix[100], postfix[100];
    int i = 0;
    char ch;
    printf("Enter your infix expression: ");
    scanf("%s", infix);
    push('#');
    while (infix[i] != '\0') {
        if (isalpha(infix[i])) {
            printf("%c", infix[i]); // Output the operand
        } else if (infix[i] == '(') {
            push(infix[i]);
        } else if (infix[i] == ')') {
            while (stack[top] != '(') {
                ch = pop();
                printf("%c", ch);
            }
            pop(); // Remove the '('
        } else {
            while ((stack[top] != '#') && (pr(infix[i]) <= pr(stack[top]))) {
                ch = pop();
                printf("%c", ch);
            }
            push(infix[i]);
        }
        i++;
    }
    // Pop remaining operators from the stack
    while (top != -1) {
        if (stack[top] == '(') {
            printf("\nThere was an issue with the expression...");
            break;
        }
        printf("%c", pop());
    }
    return 0;
}
